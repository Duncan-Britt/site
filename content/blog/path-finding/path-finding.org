#+TITLE: Path Planning With A*
#+SETUPFILE: ../../../setup/blog-post.setup
#+DATE: <2023-03-12>
#+FILETAGS: :algorithms:
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="./path-finding.css"/>
#+HTML_HEAD: <script type="module" src="./path-finding.js"></script>

In this blog post, I'll walk through my implementation of the A* path planning algorithm, including all of the source code used in the demos. [[eww:/blog/autonomous-mobile-robot/autonomous-mobile-robot.html][I originally wrote this program in C++, to run on an Arduino,]] and then translated it line by line to JavaScript. So, this probably isn't the most idiomatic JavaScript code, but its nice in that it would be very straightforward to use this guide to implement this in a non-garbage-collected language.

* The A* Search Algorithm
#+ATTR_HTML: :style width: 200px;height: auto;
#+CAPTION: Demo
[[./A_star.gif]]

#+BEGIN_EXPORT html
<div id="grid-container"></div>
#+END_EXPORT

** Breadth First Search
Let's start with a very basic search algorithm: Breadth-First Search (BFS). Given a tree of nodes, we could search for a specific node by first visiting the root node, and then adding its children to a queue. From there, we would visit each node added to the queue, and for each, add its children to the queue.

#+ATTR_HTML: :style max-width: 500px; height: auto;
#+CAPTION: Breadth First Search
[[./bfs.gif]]

** Dijkstra's Shortest Path
Dijkstra's famous algorithm improves upon BFS by using a priority queue, in which the elements are ordered based on the cost associated with arriving at each node. You could imagine a graph in which each node is a destination, and the edges are the roads between destinations. Associated with each edge is a cost which could represent the time it would take to traverse the road.

This time, our queue will not contain individual nodes, but paths.

#+ATTR_HTML: :style max-width: 500px; height: auto;
#+CAPTION: Dijkstra's Shortest Path Algorithm
[[./dijkstra.gif]]

** A*

The A* search algorithm builds upon Dijkstra's algorithm by considering not only the cost associated with reaching a node, but also an estimate of the cost to reach the goal. Imagine every node in the previous graph contained a number which was the distance, as the crow flies, to the goal. This number would be weighed equally with the cost to reach a node when ordering the priority queue.

*** Grid Implementation

In this demonstration, I'm going to show you how I used A* in the context of an occupancy grid to find the shortest path between the two red squares in the grid, while avoiding obstacles. To start, we'll need a way to represent our grid. For convenience, we should have a human readable way to initialize our grid. I've made it so the grid can be initialized from a string.

#+BEGIN_SRC javascript -n 0 :tangle path-finding.js :exports source
  let init_grid_str = `
  ................
  ................
  ...##......##...
  ....#.......#...
  ....#.......#...
  ....######..###.
  .........#......
  .........#......
  .........#......
  ...##....####...
  ....#.......#...
  ....#.......#...
  ....####....###.
  ................
  ................
  `.trim();

  const EMPTY = 0;
  const OCCUPIED = 1;
  const END_POINT = 2;

  class Grid {
    constructor(grid_str) {
      const rows = grid_str.split('\n');
      this.nRows = rows.length;
      this.nCols = rows[0].length;
      this._grid = Array(this.nCols * this.nRows).fill(EMPTY);
      rows.forEach((row, y) => {
        row.split('').forEach((char, x) => {
          this._grid[y * this.nCols + x] = char == '.' ? EMPTY : char == '#' ? OCCUPIED : END_POINT;
        });
      });

      this.start_idx = this.nCols * (this.nRows - 1); // Traverse from the top right
      this.end_idx = this.nCols - 1;                  // to the bottom left corner
      this._grid[this.start_idx] = END_POINT;         
      this._grid[this.end_idx] = END_POINT;
      this.path_capacity = 100;
      this.path_size = 0;
      this.path = Array(this.path_capacity);
    }
#+END_SRC

You may have noticed that I set a ~path_capacity~ variable. This can be used to limit the memory consumption of our path finding algorithm, which would be useful if we were working with limited hardware.

Internally, the grid is represented as a one dimensionally array, and in the above code, you can see how we can translate $(x,y)$ coordinates to grid indices mathematically on line 30: ~y * this.nCols + x~. We'll provide an interface for accessing grid elements by their $(x,y)$ coordinates.

#+BEGIN_SRC javascript -n 43 :tangle path-finding.js :exports source  
    set_at(val, x, y) {
      if (x < 0 || y < 0) {
        return;
      }
      this._grid[y * this.nCols + x] = val;
    }

    at(x, y) {
      return this._grid[y * this.nCols + x];
    }

    idx_to_cartesian(idx) {
      return [idx % this.nCols, Math.floor(idx / this.nCols)];
    }
#+END_SRC  

We also need a way to estimate the cost associated with reaching our goal, from a given space on the grid. We can do this by taking the euclidian distance between a given grid space and the target grid space. $$d = \sqrt{(y_b - y_a)^2 + (x_b - x_a)^2}$$

#+BEGIN_SRC javascript -n 58 :tangle path-finding.js :exports source
  distance(idx_a, idx_b) {
    let [ ax, ay ] = this.idx_to_cartesian(idx_a);
    let [ bx, by ] = this.idx_to_cartesian(idx_b);

    return Math.round(10 * Math.sqrt(Math.pow(by - ay, 2) + Math.pow(bx - ax, 2)));
  }

  clear_path() {
    this.path_size = 0;
  }
#+END_SRC

I multiply by 10 and round the answer so that I can stick to integer values. I've also included a convenience method for clearing the path. That will be useful later.

At this point, we're ready to dive into our path planning.

*** Plotting A Course

#+BEGIN_SRC javascript -n 69 :tangle path-finding.js :exports source
    plot_course() {
      const pq_max_size = 10000;
      let pq = Array(pq_max_size);
      for (let i = 0; i < pq_max_size; i += 1) {
        pq[i] = new PathNode();
      }

      pq[0].grid_idx = this.end_idx;
      pq[0].parent = null;
      pq[0].gCost = 0;
      pq[0].hCost = this.distance(this.end_idx, this.start_idx);
      let pq_size = 1;
#+END_SRC      

The priority queue is implemented as an array of nodes. Each node has knowledge of its index in the grid, its parent on a path to it, the cost associated with reaching the node from the starting point, and the estimated cost associated with reaching the goal. ~pq_size~ is used to keep track of the size of our priority queue.

The priority queue is initialized with a node representing the desired /end/ position along our path. This warrants some explanation. A reminder, I wrote this code to run on an Arduino, as the brains of an autonomous mobile robot. The thinking behind this was, if we run out of memory before the path is completed, we can retry the path planning with the new end goal as the final position in the path from the previous trial. This way, if we're able to work our way back to the start, we'll have confidence that there is a path to the end goal, even if the robot can't hold it in memory all at once.

We're also keeping track of the nodes we've previously explored.

#+BEGIN_SRC javascript -n 82 :tangle path-finding.js :exports source
      const explored_max_size = pq_max_size;
      let explored = Array(explored_max_size).fill(new PathNode());
      for (let i = 0; i < pq_max_size; i += 1) {
        explored[i] = new PathNode();
      }
      let explored_size = 0;  
#+END_SRC

Based on the number of rows and columns, we can find the relative index of the neighboring grid spaces. Let $c$ be the number of columns in the grid, and $i$ be the grid index of the current node being visited.

\begin{align*}
\begin{bmatrix}
i - (c + 1) & i-c & i - c + 1) \\
i - 1 & i & i + 1 \\
i + c + 1 & i + c & i + c - 1
\end{bmatrix}
\end{align*}

#+BEGIN_SRC javascript -n 89 :tangle path-finding.js :exports source
      // 5 6 7
      // 4 X 0
      // 3 2 1
      const neighbors = [
        1, this.nCols + 1, this.nCols, this.nCols - 1, -1,
        (0 - this.nCols) - 1, (0 - this.nCols), (0 - this.nCols) + 1
      ];
#+END_SRC

We're gonna search for a path to our goal until
- the goal has been reached,
- our priority queue runs out, or
- we reach the capacity limit of our priority queue, explored nodes array, or path.

We begin by dequeuing the highest priority node from our priority queue. We check to see if our destination has been reached. If so, we set the corresponding path by visiting the ancestors of the node, and return 0 to indicate success.

#+BEGIN_SRC javascript -n 97 :tangle path-finding.js :exports source
  while (pq_size != 0) {
    if (explored_size >= explored_max_size) {
      return -5;
    }
    pq_size = pq_dequeue(pq, pq_size, explored, explored_size);
    explored_size += 1;

    if (explored[explored_size-1].grid_idx == this.start_idx) {
      this.path[0] = explored[explored_size-1].grid_idx;
      this.path_size += 1;
      let node = explored[explored_size - 1].parent;
      for (let i = 1; node instanceof PathNode; i += 1) {
        this.path[i] = node.grid_idx;
        node = node.parent;
        this.path_size += 1;
        if (this.path_size == this.path_capacity && node instanceof PathNode) {
          return -1; // Path capacity reached before completing path.
        }
      }

      return 0;
    }  
#+END_SRC

Having confirmed that our goal has not been reached, we can the add the node's neighbors to the priority queue. But we have to check that the index we find corresponds to an actual grid space. It may not if the currently visited node is along the boundaries of our grid.

#+BEGIN_SRC javascript -n 120 :tangle path-finding.js :exports source
    for (let i = 0; i < 8; i += 1) {
      if (explored[explored_size-1].grid_idx < this.nCols && i >= 5) continue; // first row
      if (explored[explored_size-1].grid_idx % this.nCols == 0 && i >= 3 && i <= 5) continue; // first column
      if (explored[explored_size-1].grid_idx % this.nCols == this.nCols - 1 && (i <= 1 || i == 7)) continue; // last column
      if (Math.floor(explored[explored_size-1].grid_idx / this.nCols) == this.nRows - 1 && (i <= 3 && i >= 1)) continue; // last row

      let neighbor_idx = explored[explored_size - 1].grid_idx + neighbors[i];
#+END_SRC

For each of these valid neighboring grid spaces, we need to ask whether there is an obstacle their. If not, then we should add it to our priority queue, provided it's not already there. If it is in the priority queue already, may need to update the node to if a lower cost path exists.

#+BEGIN_SRC javascript -n 127 :tangle path-finding.js :exports source  
        if (this._grid[neighbor_idx] == OCCUPIED) {
          continue;
        }

        // // ask whether the neighbor_idx exists in the pq already
        let in_pq = false;
        let pq_idx = 0;
        for (let i = 0; i < pq_size; i += 1) {
          if (pq[i].grid_idx == neighbor_idx) {
            in_pq = true;
            pq_idx = i;
            break;
          }
        }
        // If so, the gCost and parent may need to be updated to reflect a lower cost path
        if (in_pq) {
          let new_gCost = explored[explored_size - 1].gCost + this.distance(explored[explored_size - 1].grid_idx, neighbor_idx);
          if (new_gCost < pq[pq_idx].gCost) {
            pq[pq_idx].gCost = new_gCost;
            pq[pq_idx].parent = explored[explored_size - 1];
            pq_shift_up(pq, pq_idx);
          }
        } else { // otherwise, add a new PathNode to the queue
          pq[pq_size].grid_idx = neighbor_idx;
          pq[pq_size].parent = explored[explored_size - 1];
          pq[pq_size].gCost = explored[explored_size - 1].gCost + this.distance(explored[explored_size - 1].grid_idx, neighbor_idx);
          pq[pq_size].hCost = this.distance(neighbor_idx, this.start_idx);

          pq_shift_up(pq, pq_size);
          pq_size += 1;

          if (pq_size == pq_max_size) {
            return -4; // Reached capacity for priority queue
          }
        }       
      }
    }

    return 1; // Path not found
    }
  }
#+END_SRC

Next up, the PathNodes used in ~plot_course~ need to be implemented:

#+BEGIN_SRC javascript -n 169 :tangle path-finding.js :exports source
  class PathNode {
    constructor() {
      this.grid_idx = null;
      this.parent = null;
      this.gCost = null;
      this.hCost = null;
    }

    less_than(other_node) {
      return (this.gCost + this.hCost) < (other_node.gCost + other_node.hCost);
    }

    greater_than(other_node) {
      return (this.gCost + this.hCost) > (other_node.gCost + other_node.hCost);
    }
  }
#+END_SRC

*** Priority Queue
We still need to implement the functionality associated with our priority queue. In order for A* to be efficient, the priority queue must be efficient, so I'ved used a min-heap.

#+ATTR_HTML: :style max-width: 400px; height: auto;
#+CAPTION: Min Heap Example
[[./min-heap.png]]

In order to traverse the tree, we'll need to be able to find the indices of the parent and children for a given node.

#+BEGIN_SRC javascript -n 186 :tangle path-finding.js :exports source
  function pq_parent(i) {
    return Math.floor((i - 1) / 2);
  }

  function pq_left_child(i) {
    return (2 * i) + 1;
  }

  function pq_right_child(i) {
    return (2 * i) + 2;
  }
#+END_SRC

We'll also need a function to insert new nodes into our heap. We can do this by first appending the new node to the end of the end of our array, and then swapping it with its ancestors until the heap property is preserved.

#+BEGIN_SRC javascript -n 198 :tangle path-finding.js :exports source
  function pq_shift_up(pq, i) {
    while (i > 0 && pq[pq_parent(i)].greater_than(pq[i])) {
      let parent_i = pq_parent(i);
      let temp = new PathNode();
      Object.assign(temp, pq[i]);
      Object.assign(pq[i], pq[parent_i]);
      Object.assign(pq[parent_i], temp);

      i = parent_i;
    }
  }
#+END_SRC

When we dequeue a node from our priority queue, we'll need to move things around in our heap so that we can find and access the new highest priority node. For this, we'll take the last node in our array and move it to the top of the heap: the first element in our array. From there, we'll swap it with the least-cost child until the heap property is satisfied.

#+BEGIN_SRC javascript -n 210 :tangle path-finding.js :exports source
  function pq_shift_down(pq, size, i) {
    let min_index = i;

    while (true) {
      let l = pq_left_child(i);

      if (l < size && pq[l].less_than(pq[min_index])) {
        min_index = l;
      }

      let r = pq_right_child(i);

      if (r < size && pq[r].less_than(pq[min_index])) {
        min_index = r;
      }

      if (i != min_index) {
        let temp = new PathNode();
        Object.assign(temp, pq[i]);
        pq[i] = pq[min_index];
        pq[min_index] = temp;
        i = min_index;
      } else {
        break;
      }
    }
  }

  function pq_dequeue(pq, pq_size, explored, explored_size) {
    Object.assign(explored[explored_size], pq[0]);
    pq[0] = pq[pq_size - 1];
    pq_shift_down(pq, pq_size - 1, 0);
    return pq_size - 1;
  }
#+END_SRC

*** Rendering
Finally, all that's left is to render our completed grid and path. This post is about path planning, so I won't go into too much detail, but below you can see how I've used an HTML canvas element to display the grid and draw the path. In addition, there are event handlers which allow you to interact with the grid, dragging the end points, are drawing/erasing obstacles.

#+BEGIN_SRC javascript -n 245 :tangle path-finding.js :exports source
  const SCALE = 18;
  class CanvasDisplay {
    constructor(parent, grid) {
      this.canvas = document.createElement("canvas");
      this.canvas.style.border = "6px solid black";
      this.canvas.style.touchAction = 'none';
      this.canvas.width = Math.min(600, grid.nCols * SCALE);
      this.canvas.height = Math.min(450, grid.nRows * SCALE);
      parent.appendChild(this.canvas);
      this.cx = this.canvas.getContext("2d");

      this.flipPlayer = false;

      this.viewport = {
        left: 0,
        top: 0,
        width: this.canvas.width / SCALE,
        height: this.canvas.height / SCALE,
      };

      this.grid = grid;
      let rerender_grid = ((e) => {
        e.stopPropagation();
        e.preventDefault();
        let x = Math.floor(e.offsetX / SCALE);
        let y = Math.floor(e.offsetY / SCALE);
        // Prevent issues from dragging or drawing off of grid.
        if (x < 0 || y < 0 || x >= this.grid.nCols || y >= this.grid.nRows) {
          return;
        }

        let idx = y * this.grid.nCols + x;
        if (idx == this.grid.start_idx || idx == this.grid.end_idx) {
          this.canvas.style.cursor = "grab";
        } else {
          this.canvas.style.cursor = "crosshair"
        }

        if (is_drawing) {
          // Prevent drawing over path end points
          if (idx == this.grid.start_idx || idx == this.grid.end_idx) {
            return;
          }

          let new_value = is_erasing ? 0 : 1;
          this.grid.set_at(new_value, x, y);
          this.draw();
        } else if (is_dragging) {
          this.canvas.style.cursor = "grabbing";
          if (dragging_start) {
            this.grid._grid[this.grid.start_idx] = 0;
            this.grid.set_at(2, x, y);
            this.grid.start_idx = idx;
          } else {
            this.grid._grid[this.grid.end_idx] = 0;
            this.grid.set_at(2, x, y);
            this.grid.end_idx = idx;
          }
          this.draw();
        }
      }).bind(this);

      let press_handler = ((e) => {
        e.stopPropagation();
        e.preventDefault();
        let x = Math.floor(e.offsetX / SCALE);
        let y = Math.floor(e.offsetY / SCALE);
        let target_cell_type = this.grid.at(x, y);

        is_dragging = target_cell_type == 2 ? true : false;
        if (is_dragging) {
          let idx = y * this.grid.nCols + x;
          dragging_start = idx == this.grid.start_idx;
          return;
        }

        is_drawing = target_cell_type == 2 ? false : true;      
        is_erasing = target_cell_type == 1 ? true : false;

        let new_value = is_erasing ? 0 : 1;
        this.grid.set_at(new_value, x, y);
        this.draw();
      }).bind(this);

      let unclick_handler = ((e) => {
        if (is_dragging) {
          this.canvas.style.cursor = "grab";
        }

        is_drawing = false;
        is_erasing = false;
        is_dragging = false;
        this.grid.clear_path();
        let err = this.grid.plot_course();
        if (err == 0) {
          this.draw_path(this.grid);
        } else {
          console.log(err);
        }
      }).bind(this);

      this.canvas.addEventListener('mousedown', press_handler, true);
      this.canvas.addEventListener('pointerdown', press_handler, true);

      window.addEventListener('mouseup', unclick_handler, true);      
      window.addEventListener('pointerup', unclick_handler, true);

      this.canvas.addEventListener('mousemove', rerender_grid, true);
      this.canvas.addEventListener('pointermove', rerender_grid, true);

      this.draw();
      let err = this.grid.plot_course();
      if (err == 0) {
        this.draw_path(this.grid);
      } else {
        console.log(err);
      }
    }

    clear() {
      this.canvas.remove();
    }
  }

  CanvasDisplay.prototype.draw = function() {
    let {left, top, width, height} = this.viewport;
    let xStart = Math.floor(left);
    let xEnd = Math.ceil(left + width);
    let yStart = Math.floor(top);
    let yEnd = Math.ceil(top + height);

    for (let y = yStart; y < yEnd; y++) {
      for (let x = xStart; x < xEnd; x++) {
        let tile = this.grid.at(x,y)
        let screenX = (x - left) * SCALE;
        let screenY = (y - top) * SCALE;      
        this.cx.fillStyle = tile == 0 ? "#2980B9" : tile == 1 ? "black" : "red";
        this.cx.fillRect(screenX, screenY, SCALE, SCALE);
      }
    }
  }

  CanvasDisplay.prototype.draw_path = function({ path, path_size }) {
    let {left, top, width, height} = this.viewport;
    if (path.length <= 1) {
      return;
    }
    this.cx.strokeStyle = "red";
    this.cx.lineWidth = SCALE / 3;
    this.cx.lineJoin = "round";
    this.cx.beginPath();
    let [ x, y ] = this.grid.idx_to_cartesian(path[0]);
    let screenX = (x - left) * SCALE + (SCALE / 2);
    let screenY = (y - top) * SCALE + (SCALE / 2);
    this.cx.moveTo(screenX, screenY);

    for (let i = 1; i < path_size; i += 1) {
      let [ x, y ] = this.grid.idx_to_cartesian(path[i]);
      let screenX = (x - left) * SCALE + (SCALE / 2);
      let screenY = (y - top) * SCALE + (SCALE / 2);
      this.cx.lineTo(screenX, screenY);
    }

    this.cx.stroke();
  }

  let grid = new Grid(init_grid_str);
  var is_drawing = false;
  var is_erasing = false; // independent of whether drawing or not. erasing is a kind of drawing.
  var is_dragging = false;
  var dragging_start = false;

  document.addEventListener("DOMContentLoaded", () => {  
    let canvas = new CanvasDisplay(document.querySelector('#grid-container'), grid);
  });
#+END_SRC

* Comments                                                         :noexport:
#+BEGIN_EXPORT html
<script>talkyardServerUrl='https://site-jbajhd11mo.talkyard.net';</script>
<script async defer src="https://c1.ty-cdn.net/-/talkyard-comments.min.js"></script>
<!-- You can specify a per page discussion id on the next line, if your URLs might change. -->
<div class="talkyard-comments" data-discussion-id="" style="margin-top: 45px;">
<noscript>Please enable Javascript to view comments.</noscript>
</div>
#+END_EXPORT
